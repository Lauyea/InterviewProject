// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebAPIs.Models;

namespace WebAPIs.Models
{
    public partial class DatabaseContext
    {
        private IDatabaseContextProcedures _procedures;

        public virtual IDatabaseContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DatabaseContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDatabaseContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DataInitializeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertMonthlyRevenueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectMonthlyRevenueResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DatabaseContextProcedures : IDatabaseContextProcedures
    {
        private readonly DatabaseContext _context;

        public DatabaseContextProcedures(DatabaseContext context)
        {
            _context = context;
        }

        public virtual async Task<List<DataInitializeResult>> DataInitializeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DataInitializeResult>("EXEC @returnValue = [dbo].[DataInitialize]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertMonthlyRevenueResult>> InsertMonthlyRevenueAsync(int? ReportDate, int? DataYearMonth, int? CompanyCode, string CompanyName, string Industry, long? CurrentMonthRevenue, long? PreviousMonthRevenue, long? LastYearSameMonthRevenue, decimal? MonthComparisonPercentage, decimal? YearComparisonPercentage, long? CumulativeCurrentYearRevenue, long? CumulativeLastYearRevenue, decimal? CumulativeComparisonPercentage, string Notes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportDate",
                    Value = ReportDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataYearMonth",
                    Value = DataYearMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyName",
                    Size = 8,
                    Value = CompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Industry",
                    Size = 8,
                    Value = Industry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentMonthRevenue",
                    Value = CurrentMonthRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PreviousMonthRevenue",
                    Value = PreviousMonthRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LastYearSameMonthRevenue",
                    Value = LastYearSameMonthRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonthComparisonPercentage",
                    Precision = 24,
                    Scale = 18,
                    Value = MonthComparisonPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "YearComparisonPercentage",
                    Precision = 24,
                    Scale = 18,
                    Value = YearComparisonPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeCurrentYearRevenue",
                    Value = CumulativeCurrentYearRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeLastYearRevenue",
                    Value = CumulativeLastYearRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeComparisonPercentage",
                    Precision = 24,
                    Scale = 18,
                    Value = CumulativeComparisonPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Notes",
                    Size = 85,
                    Value = Notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertMonthlyRevenueResult>("EXEC @returnValue = [dbo].[InsertMonthlyRevenue] @ReportDate, @DataYearMonth, @CompanyCode, @CompanyName, @Industry, @CurrentMonthRevenue, @PreviousMonthRevenue, @LastYearSameMonthRevenue, @MonthComparisonPercentage, @YearComparisonPercentage, @CumulativeCurrentYearRevenue, @CumulativeLastYearRevenue, @CumulativeComparisonPercentage, @Notes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectMonthlyRevenueResult>> SelectMonthlyRevenueAsync(string CompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 8,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectMonthlyRevenueResult>("EXEC @returnValue = [dbo].[SelectMonthlyRevenue] @CompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
